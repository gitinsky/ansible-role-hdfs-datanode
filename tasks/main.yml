---
- name: create the data dirs
  file: path=/{{ item }} state=directory owner={{ hadoop_user }} group={{ hadoop_user }}
  with_items: "{{ hdfs_datanode_data_dirs }}"

- name: put hdfs-datanode-{{ env_name }}.rb eye config file
  template: src=hdfs/datanode.rb dest=/etc/eye/hdfs-datanode-{{ env_name }}.rb owner=root group=root mode=0644 backup=yes
  when: "(not (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04')) and (not (ansible_os_family == 'Elbrus'))"

- name: load config in eye
  command: bash -c "source /usr/local/rvm/scripts/rvm && eye l /etc/eye/apps.eye"
  become: yes
  when: "(not (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04')) and (not (ansible_os_family == 'Elbrus'))"

- name: put systemd unit file to its destination
  template: src=hdfs-datanode.service dest=/etc/systemd/system/hdfs-datanode-{{ env_name }}.service owner=root group=root mode=0644
  when: "ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'"
  notify: systemctl daemon-reload

- name: enable hdfs-datanode service
  service: name=hdfs-datanode-{{ env_name }} enabled=yes state=started
  when: "ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'"

- name: put {{ hadoop_distr_prefix }}/bin/datanode_start.sh
  template: src=datanode_start.sh dest={{ hadoop_distr_prefix }}/bin/datanode_start.sh
  when: "ansible_os_family == 'Elbrus'"

- name: chmod {{ hadoop_distr_prefix }}/bin/datanode_start.sh
  shell: chmod 0755 {{ hadoop_distr_prefix }}/bin/datanode_start.sh
  when: "ansible_os_family == 'Elbrus'"
